* 使用 Drop Trait 运行清理代码
  对于智能指针模式来说第二个重要的 trait 是 ~Drop~, 其允许我们在值要离开作用域时
  执行一些代码. 可以为 任何类型提供 ~Drop~ trait 的实现, 同时所指定的代码被用于
  释放类似于文件或网络连接的资源. 我们在智能指针上下文中讨论 ~Drop~ 是因为其功能
  几乎总是用于实现智能指针. eg: ~Box<T>~ 自定义了 ~Drop~ 用来释放 box 所指向的堆
  空间.

  在其他一些语言中, 我们不得不记住在每次使用完智能指针实例后调用清理内存或资源的
  代码. 如果忘记的话, 运行代码的系统可能会因为符合过重而崩溃. 在 Rust 中, 可以指
  定每当值离开作用域时被执行的代码, 编译器会自动插入这些代码. 预算我们就不需要在
  程序中到处编写在实例结束时清理这些变量的代码--而且还不会泄漏资源.

  指针在值离开作用域时应该执行的代码是实现 ~Drop~ trait. ~Drop~ trait 要求实现一
  个叫做 ~drop~ 的方法, 它获取一个 ~self~ 的可变引用.

** 通过 std::mem::drop 提早丢弃值
   我们并不能直接了当地禁用 ~drop~ 这个功能. 通常也不需要禁用 ~drop~; 整个
   ~Drop~ trait 存在的意义在于其是自动处理的. 有时可能需要提早清理某个值; 希望强
   制运行 ~drop~ 方法来释放锁以便作用域中的其他代码以获取锁. Rust 并不允许我们主
   动调用 ~Drop~ trait 的 ~drop~ 方法; 当我们希望在作用域结束之前就强制释放变量
   的话, 应该使用由标准库提供的 ~std::mem::drop~.
   
   Rust 不允许显式调用 ~drop~ 因为会自动调用 ~drop~, 会导致 *double free* 错误,
   因为 Rust 会尝试清理相同的值两次.

   ~std::mem::drop~ 函数不同于 ~Drop~ trait 的 ~drop~ 方法. 可以通过传递希望今早
   丢弃的值作为参数. ~std::mem::drop~ 位于 prelude.
