* 高级函数与闭包
** 函数指针
   通过函数指针允许我们使用函数作为另一个函数的参数. 函数的类型是 ~fn~ 以免与
   ~Fn~ 闭包 trait 相混淆. ~fn~ 被称为 *函数指针(function poninter)*. 指定参数为
   函数指针的语法类似于闭包.

   不同于闭包, ~fn~ 是一个类型而不是一个 trait, 所以直接指定 ~fn~ 作为参数而不是
   声明一个带有 ~Fn~ 作为 trait bound 的泛型参数.

   函数指针实现了所有三个闭包 trait(~Fn~, ~FnMut~ 和 ~FnOnce~), 所以总是可以在调
   用期望闭包的函数时传递函数指针作为参数. 倾向于编写使用泛型和闭包 trait 的函数,
   这样它就能接受函数或闭包作为参数.

   一个只期望接受 ~fn~ 而不接受闭包的情况的例子是与不存在闭包的外部代码交互时: C
   语言的函数可以接受函数作为参数, 但 C 语言没有闭包.

** 返回闭包
   闭包表现为 trait, 这意味着 *不能直接返回* 闭包. 对于大部分需要返回 triat 的情
   况, 可以使用实现了期望返回的 trait 的具体类型来替代函数的返回值. 但是这不能用
   于闭包, 因为他们没有一个可返回的具体类型; eg: 不允许使用函数指针 ~fn~ 作为返
   回类型.
