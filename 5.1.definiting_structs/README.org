* 定义并实例化结构体
  
  *元组结构体* (tumple structs): 有着结构体名称提供的含义, 但没有具体的字段名,
   只有类型:
   #+begin_src rust
     struct Color(i32, i32, i32);
     let black = Color(0, 0, 0);
   #+end_src

   没有任何字段的类单元结构体
   可以定义一个没有任何字段的结构体, 称为 *类单元结构体(unit-lick structs)* 因为
   它们类似于 ~()~, 即 ~unit~ 类型. 类单元结构体常常在想要在某个类型上实现
   ~trait(第十章)~ 但不需要在类型中存储数据的时候发挥作用

** 结构体数据的所有权
   示例中的 ~User~ 结构体的定义中, 我们使用了自身拥有所有权的 ~String~ 类型而不
   是 ~&str~ 字符串 slice 类型. 这是一个 *有意而为之* 的选择, 因为我们想要这个结
   构体拥有它所有的数据, 为此只要整个结构体有效的话其数据也是有效的.

   可以使结构体存储被其他对象有用的数据的引用, 不过这么做的话需要用上 *生命周期*
   (lifetimes)(十一章). 生命周期确保结构体引用的数据有效性跟结构体本身保持一致.
   如果尝试 *结构体中存储一个引用而不指定生命周期将是无效的*
