* 无畏并发
  安全且高效的处理并发编程是 Rust 的另一个主要目标. *并发编程(Concurrent
  programming)*, 代表程序的不同部分相互独立的执行, 而 *并行编程(parrallel
  programming)* 代表程序不同部分与同时执行.

  对于高级语言来说, 只实现可能解决方案的子集是一个合理的策略, 因为高级语言所许诺
  的价值来源于牺牲一些控制来换取抽象. 然而对于底层语言则期望在任何给定的情况下有
  着最高的性能且对硬件有更少的抽象. 因此 Rust 提供了多种工具, 以符合实际情况和需
  求的方式来为问题建模.

  本章涉及内容:
  - 如何创建线程来同时运行多段代码
  - *消息传递(Message passing)* 并发, 其中通道(channel) 被用来在线程间传递消息
  - *共享状态(Shared state)* 并发, 其中多个线程可以访问同一片数据.
  - ~Sync~ 和 ~Send~ trait, 将 Rust 的并发保证扩展到用户定义的以及标准库提供的类
    型中.
