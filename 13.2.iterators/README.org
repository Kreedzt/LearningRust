* 使用迭代器处理元素序列
  迭代器模式允许对一个项的序列进行某些处理. *迭代器(iterator)* 负责遍历序列中的
  每一项和决定序列何时结束的逻辑. 当使用迭代器时, 我们无需重新实现这些逻辑.

  在 Rust 中, 迭代器是 *惰性的(lazy)*, 这意味着在调用方法使用迭代器之前它都不会
  有效果.

  在标准库中没有提供迭代器的语言中, 我们可能会使用一个从 0 开始的索引变量, 使用
  这个变量索引 vector 中的值, 并循环增加其值知道达到 vector 的元素数量.

** Iterator trait 和 next 方法
   迭代器都实现了一个叫做 ~Interator~ 的定义于标准库的 trait. 类似如下:
   #+begin_src rust
     pub trait Iterator {
         type Item;

         fn next(&mut self) -> Option<Self::Item>;
         //...
     }
   #+end_src

   此处有新语法: ~type Item~ 和 ~Self::Item~, 它们定义了 trait 的 *关联类型
   (associated type)*. 19 章深入讲解, 现在只需知道这段代码表明实现 ~Iterator~
   trait 要求同时定义一个 ~Item~ 类型, 这个 ~Item~ 类型被用作 ~next~ 方法的返回
   值类型. 换句话说, ~Item~ 类型将是迭代器返回元素的类型.

   ~next~ 是 ~Iterator~ 实现者被要求定义的唯一方法. ~next~ 一次返回迭代器中的一
   个项, 封装在 ~Some~ 中, 当迭代器结束时, 它返回 ~None~.

** 消费迭代器的方法
   ~Iterator~ trait 有一系列不同的由标准库提供默认实现的方法; 可以在 ~Iterator~
   trait 的标准库 API 文档中找到所有这些方法. 一些方法在其定义中调用了 ~next~ 方
   法, 这也就是为什么在实现 ~Iterator~ trait 时要求实现 ~next~ 方法的原因.

   这些调用 ~next~ 方法的方法被称为 *消费适配器(consuming adaptors)*, 因为调用它
   们会消耗迭代器.

** 产生其他迭代器的方法
   ~Iterator~ trait 中定义了另一类方法, 被称为 *迭代器适配器(iterator
   adaptors)*, 它们允许我们将当前迭代器变为不同类型的迭代器. 可以链式调用多个迭
   代器适配器. 不过因为所有迭代器都是 *惰性* 的, 必须调用一个消费适配器方法以便
   获取迭代器适配器调用的结果.

   
