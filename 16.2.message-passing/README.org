* 使用消息传递在线程间传递数据
  一个日益流行的确保安全并发的方式是 *消息传递(message passing)*, 这里线程或
  actor 通过发送数据包含数据的消息来相互沟通. 这个思想来源于 Go 编程语言文档中的
  口号:

  "不要通过共享内存来通讯, 而是通过通讯来共享内存".

  Rust 中一个实现消息传递并发的主要工具是 *通道(channel)*, Rust 标准库提供了其实
  现的编程概念.

  编程中的通道有两部分组成, 一个发送者(transmitter)和一个接收者(receiver). 发送
  者位于上游位置, 在这里可以将橡皮鸭放入河中, 接收者则位于下游, 橡皮鸭最终会漂流
  至此. 代码中的一部分调用发送者的方法以及希望发送的数据, 另一部分则检查接收端收
  到的消息. 当发送者或接收者任一被丢弃时可以认为通道被 *关闭(closed)* 了.

  ~mpsc::channel~ 函数范湖一个元组: 第一个元素是发送端, 第二个元素是接收端.
  
  通道的发送有一个 ~send~ 方法用来获取需要放入通道的值. ~send~ 方法返回一个
  ~Result<T, E>~ 类型, 如果接收端已经被丢弃了, 将没有发送值的模板, 所以发送操作
  会返回错误.

  通讯的接收端有: ~recv~ 和 ~try_recv~.
  ~recv~ 会 *阻塞* 主线程执行知道从通道中接收一个值. 一旦发送了一个值, ~recv~ 会
  在一个 ~Result<T, E>~ 中返回它. 当通道发送端关闭, ~recv~ 会返回一个错误表明不
  会再有新的值到来.

  ~try_recv~ 不会阻塞, 会立刻返回一个 ~Result<T, E>~: ~Ok~ 值包含可用的信息, 而
  ~Err~ 值代表此时没有任何消息. 如果线程在等待消息过程中海油其他工作时使用
  ~try_recv~ 很有用: 可以编写一个循环来频繁调用 ~try_recv~, 在有可用消息时进行处
  理, 其余时候则处理一会其他工作直到再次检查.
