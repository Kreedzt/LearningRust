* 性能对比: 循环 VS 迭代器
  迭代器的版本要稍快.

  对于一个更全面的性能测试, 将会检查不同长度的文本, 不同的搜索单词, 不同长度的单
  词和所有其他的可变情况. 这里所要表达的是: 迭代器, 作为一个高级的抽象, 被编译成
  了与手写的底层代码大体一致性能代码. 迭代器是 Rust 的 *零成本抽象* (zero-cost
  abstractions) 之一, 它意味着抽象并不会加入运行时开销. 

  Rust 会优先 *展开(unroll)* 循环: 一种移除循环控制代码的代销并替换为每个迭代中
  的重复代码的优化.

  所有的系数都被储存在了寄存器中, 这意味着访问他们非常快. 这里也没有 *运行时* 数
  组访问边界检查. 所有这些 Rust 能够提供的优化使得代码极为高效. 可以大胆地使用迭
  代器和闭包, 不为此引入运行时性能损失.
