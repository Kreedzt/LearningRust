* 为使用不同类型的值而设计的 trait 对象
  vector 局限元素必须同种类型. 有时我们希望库用于在特定情况下能够扩展有效的类型
  集合. 

** 定义通用行为的 trait
   我们可以定义一个存放 *trait对象(trait object)* 的 vector. trait 对象指向了一
   个实现了我们制定 trait 的类型的实例, 以及一个用于在运行时查找该类型的 trait
   方法的表. 我们通过指定某种指针来创建 trait 对象, 例如 ~&~ 引用或 ~Box<T>~ 智
   能指针, 还有 ~dyn~ keyword, 以及指定相关的(19 章介绍动态大小类型和 Sized
   trait 介绍每个 trait 对象必须使用指针的原因) trait. 我们可以使用 trait 对象
   代替泛型或具体类型. 任何使用 trait 对象的位置, Rust 的类型系统会载编译时确保
   任何在此上下文中使用的值会实现其 trait 对象的 trait. 如此便无需在编译时就知晓
   所有可能的类型.

   Rust 刻意不将结构体与枚举称为 "对象", 以便与其他语言中的对象相区别. 在结构体
   或枚举中, 结构体字段中的数据和 ~impl~ 块中的行为是分开的, 不同于其他语言中将
   数据和行为组合进一个称为对象的概念中. trait 对象将数据和行为两者相结合, 从这
   种意义上说 *则* 其类似其他语言中的对象. 不过 trait 对象不同于传统的对象, 因为
   不能向 trait 对象增加数据. trait 对象并不像其他语言中的对象那么通用: 其(trait
   对象) 具体的作用是允许对通用行为进行抽象.

** 实现类型
   只关心所反映的信息而不是其具体类型: 类似于动态类型语言中称为 *鸭子类型(duck
   typing)* 的概念: 如果走起来像一只鸭子, 叫起来像一只鸭子, 那么它就是鸭子.

   使用 trait 对象和 Rust 类型系统来进行鸭子类型操作的优势是无需在运行时检查一个
   值是否实现了特定方法或担心在调用时因为值没有实现方法而产生错误. 如果值没有实
   现 trait 对象所需的 trait 则 Rust 不会编译这些代码.

** trait 对象执行动态分发
   当对泛型使用 trait bound 时编译器所进行单态化处理: 编译器为每一个被泛型类型参
   数代替的具体类型生成了非泛型的函数非方法实现. 单态化所产生的的代码进行 *静态
   分发(static dispatch)*. 静态分发发生于编译器在编译时就知道调用了什么方法的时
   候. 这与 *动态分发(dynamic dispatch)* 相对, 这时编译器在编译时无法知晓调用饿
   了什么方法. 在动态分发的情况下, 编译器会生成在运行时确定调用了什么方法的代码.

   当使用 trait 对象时, Rust 必须使用动态分发. 编译器无法知晓所有可能用于 trait
   对象代码的类型, 所以它也不知道应该调用哪个类型的哪个方法实现. 为此, Rust在运
   行时使用 trait 对象中的指针来知晓需要调用哪个方法. 动态分发也阻止编译器有选择
   的内联方法代码, 这会相应的 *禁用* 一些优化. 需要权衡取舍.

** Trait 对象要求对象安全
   只有 *对象安全(object safe)* 的 trait 才可以组成 trait 对象, 围绕所有使得
   trait 对象安全的属性存在一些复杂的规则.

   如果一个trait 中所有的方法有如下属性时, 则该 trait 是对象安全的:
   - 返回值类型不为 ~Self~
   - 方法没有任何泛型类型参数
   
     
   ~Self~ 关键字是我们要实现 trait 或方法的类型的别名. 对象安全对于 trait 对象是
   必须的, 因为一旦有了 trait 对象, 就不再知晓实现该 trait 的具体类型是什么了.
   如果 trait 方法返回具体的 ~Self~ 类型, 但是 trait 对象忘记了其真正的类型, 那
   么方法不可能使用已经忘却的原始具体类型. 同理对于泛型参数来说, 当使用 trait 时
   其会放入具体的参数: 此具体类型变成了实现该 trait 的类型的一部分. 当使用 trait
   对象时其具体类型被抹去了, 故无从得知放入泛型参数类型的类型是什么.

   不安全的 trait:
   #+begin_src rust
     pub trait Clone {
         fn clone(&self) -> Self;
     }
   #+end_src

   ~String~ 实现了 ~Clone~ trait, 当在 ~String~ 实例上调用 ~clone~ 方法时会得到
   一个 ~String~ 实例. 类似的, 当调用 ~Vec<T>~ 实例的 ~clone~ 方法会得到一个
   ~Vec<T>~ 实例. ~clone~ 的签名需要知道什么类型会代替 ~Self~, 因为这是它的返回
   值.
   
