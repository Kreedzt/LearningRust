* 泛型数据类型
** 泛型代码的性能
   Rust 通过在编译时进行泛型代码的 *单态化(monomorphization)* 来保证效率.
   单态化是一个通过填充编译时使用的具体类型, 将通用代码转换为特定代码的过程.

   编译器所做的工作与我们创建泛型的函数的步骤相反. 编译器寻找所有泛型代码被调用
   的位置并使用发那些代码针对具体类型生成代码.

   #+begin_src rust
     let integer = Some(5);
     let float = Some(5.0);
   #+end_src

   以上 ~Option~ 的例子中, 编译器会读取传递给 ~Option<T>~ 的值并会发现有两种
   ~Option<T>~:
   一个对应 ~i32~ 另一个对应 ~f64~. 为此, 他会将泛型定义 ~Option<T>~ 展开, 接着
   将泛型定义替换为具体定义:
   #+begin_src rust
     enum Option_i32 {
         Some(i32),
         None,
     }

     enum Option_f64 {
         Some(f64),
         None
     }

     fn main() {
         let integer = Option_i32::Some(5);
         let float = Option_f64::Some(5.0);
     }
   #+end_src

   Rust 将会为每一个实例编译其特定类型的代码. 这意味着在使用泛型时没有运行时的开
   销. 这个单态化过程正式 Rust 泛型在运行时效率及其高效的原因.
