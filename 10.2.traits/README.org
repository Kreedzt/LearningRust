* trait: 定义共享的行为
  trait 告诉 Rust 编译器某个特定类型拥有可能与其他类型共享的可能. 可以通过 trait
  以一种抽象的方式定义共享的行为. 可以使用 trait bounds 指定泛型是任何拥有特定行
  为的类型

  *注意*: trait 类似于其他语言中的常被称为 *接口(interfaces)* 的功能, 虽然有一些
   不同.

** 定义 trait
   trait 定义是一种将方法签名组合起来的方法, 目的是实定义一个实现某些目的所必须
   的行为的集合.

** 为类型实现 trait
   ~Summary~ 必须是公有 trait 使得其他 crate 可以实现它, 这也是将 ~pub~ 置于
   ~trait~ 之前的原因

   实现 trait 时需要注意一个限制: 只有当 trait 或者要实现 trait 的类型位于 crate
   的 *本地作用域* 时, 才能为该类型实现 trait.

   但是 *不能为外部类型* 实现外部 trait. eg: 不能在 ~aggregator~ crate 中为
   ~Vec<T>~ 实现 ~Display~ trait. 这是因为它们都定义在标准库中, 并不位于
   ~aggregator~ crate 本地作用域中. 这个限制是被称为 *相干性(coherence)* 的程序
   属性的一部分, 或者更具体的说是 *孤儿规则(orphan rule)*, 其得名于不存在父类型.
   这条规则确保了代码不会破坏

   trait 可以增加默认实现

** trait 作为参数

** 返回实现了 trait 的类型   
   返回一个知识指定了需要实现的 trait 的类型的能力在闭包和迭代器场景十分的有用.
   闭包和迭代器创建 *只有编译器知道* 的类型, 或者是非常长的类型. ~impl Trait~ 允
   许简单地指定函数返回一个 ~Iterator~ 而无需写出实际的冗长类型.

   
