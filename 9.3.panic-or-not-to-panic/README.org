* panic! 还是不 panic!
  代码 panic 没有恢复的可能, 返回 ~Result~ 将选择权交给了调用者

  - 示例, 代码原型和测试非常适合 panic
  - 当我们比编译器知道更多的情况, 优先使用 Result
  - 当有可能会导致有害状态的情况下建议使用 ~panic!~
    + 有害状态并不包含 *预期* 会偶尔发生的错误
    + 在之后的代码运行依赖于不处于这种有害状态
    + 当没有可行的手段来将有害状态信息编码进所使用的类型中的情况

      ~panic!~ 适合调用不能够控制的外部代码, 这时无法修复其返回的无效状态

      当错误预期会出现时, 返回 ~Result~ 更合适. 这样的例子包括解析器接收到格式错
      误的数据, 或者 HTTP 请求返回了一个表明触发了限流的状态. 
