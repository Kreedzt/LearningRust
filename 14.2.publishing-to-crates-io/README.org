* 将 crate 发布到 Crates.io
** 编写有用的文档注释 
   Rust 的特定的用于文档的注释类型, 通常被称为 *文档注释* (documentation
   comments), 他们会生成 HTML 文档. 这些 HTML 展示公有 API 文档注释的内容, 他们
   意在让对库感兴趣的程序员理解如何 *使用* 这个 crate, 而不是它是如何被 *实现*
   的.

   文档注释使用三斜杠 ~///~ 以支持 *Markdown* 注释来格式化文本. 文档注释就位于需
   要文档的项的之前.

*** 常用 (文档注释) 部分
    除 "Examples" 部分外, 还可写如下部分
    - *Panics*: 这个函数可能会 ~panic!~ 的场景. 并不希望程序崩溃的函数调用者应该
      确保他们不会在这些情况下调用此函数.
    - *Errors*: 如果这个函数返回 ~Result~, 此部分描述可能会出现何种错误以及什么
      情况会造成这种错误, 这有助于调用者编写代码来采用不同的方式处理不同的错误.
    - *Safety*: 

*** 文档注释作为测试
    ~cargo test~ 也会像测试那样运行文档中的代码, 也会捕获到 panic.

*** 注释包含项的结构
    ~//!~: 这为包含注释的项, 而不是位于注释之后的项增加文档. 这通常用于 crate 根
    文件 (通常是 src/lib.rs) 或模块的根文件为 crate 或模块整体提供文档.

    
** 使用 pub use 导出合适的公有 API
   开发时候使用的文件架构可能并不方便用户. 结构可能是一个包含多个层级的分层结构,
   不过这对于用户来说并不方便. 这是因为想要使用被定义在很深层级的人可能很难发现
   这些类型的存在.

   公有 API 的结构是发布 crate 时主要考虑的. crate 用户没有开发者那么熟悉其结构,
   并且如果模块层级过大他们可能会难以找到所需的部分.

   可以选择使用 ~pub use~ 重导出(re-export) 项来使公有结构不同于私有结构. 重导出
   获取位于一个位置的公有项并将其公开到另一个位置, 好像它就定义在这个新位置一样.
 
   
** 发布到 Crates.io
   发布 crate 会上传特定版本的 crate 到 crates.io 以供他人使用

   发布 crates 时请多加小心, 因为发布是 *永久性的(permanent)*. 对应版本不可能被
   覆盖, 其代码也不可能被删除. crates.io 的一个主要目标是作为一个存储代码的永久
   文档服务器, 这样所有依赖 crates.io 中的 crate 项目都能一直工作. 而允许删除版
   本没办法打成这个目标. 然而, 可以被发布的版本号确没有限制.

** 发布现存 crate 的新版本
   当修改了 crate 并准备好发布新版本时, 改变 Cargo.toml 中 ~version~ 所指定的值.
   使用语义化版本规则来根据修改的类型决定下一个版本号. 接着运行 ~cargo publish~
   来上传新版本.

** 使用 cargo yank 从 Crates.io 撤回版本
   撤回某个版本会阻止新项目开始依赖此版本, 不过所有现存此依赖的项目仍然能够下载
   和依赖这个版本.

   从本质上说, 撤回意味着所有带有 Cargo.lock 项目的依赖不会被破坏, 同时任何新生
   成的 Cargo.lock 将不能使用被撤回的版本

   #+begin_src bash
     cargo yarnk --vers 1.0.1
   #+end_src

   也可以撤销撤回操作, 并允许项目可以再次开始依赖某个版本, 通过 ~--undo~:
   #+begin_src bash
     cargo yarnk --vers 1.0.1 --undo
   #+end_src

   撤回 *并没有* 删除任何代码. 撤回功能并不意删除不小心上传的秘密信息. 如果出现
   了这种情况, 请立即重新设置这些秘密信息
