* Refutability(可反驳性): 模式是否会匹配失效
  模式有两种形式: refutable(可反驳的) 和 irrefutable(不可反驳的). 能匹配任何传递
  的可能值的模式被称为是 *不可反驳的(irrefutable)*. 一个例子就是 ~let x = 5;~ 语
  句中的 ~x~, 因为 ~x~ 可以匹配任何值所以 *不可能* 失败. 对某些可能的值进行匹配
  会失败的模式被称为是 *可反驳的(refutable)*. 一个这样的例子便是 ~if let Some(x)
  = a_value~ 表达式中的 ~Some(x)~; 如果变量 ~a_value~ 中的值是 ~None~ 而不是
  ~Some~, 那么 ~Some(x)~ 模式不能匹配.

  函数参数, ~let~ 语句和 ~for~ 循环只能接受不可反驳的模式, 因为通过不匹配值程序
  无法进行有意义的工作. ~if let~ 和 ~while let~ 表达式被限制为只能接受可反驳的模
  式, 因为根据定义他们意在处理可能的失败: 条件表达式的功能就是根据成功或失败执行
  不同的操作.

  通常我们无需担心可反驳和不可反驳模式的区别, 不过确实需要熟悉可反驳性的概念, 这
  样当在错误信息中看到时就知道如何应对. 遇到这些情况, 根据代码行为的意图, 需要修
  改模式或者使用模式的结构.

  
