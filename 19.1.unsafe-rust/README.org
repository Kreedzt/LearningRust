* 不安全 Rust
  目前为止讨论过的代码都有 Rust 在编译时会强制执行的内存安全保证. 然而, Rust 还
  隐藏有第二种语言, 它不会强制执行这类内存安全保证: 这被称为 *不安全 Rust(unsafe
  Rust)*. 它与常规 Rust 代码无异, 但是会提供额外的超级力量.

  不安全 RUst 之所以存在, 是因为静态分析上是保守的. 当编译器尝试确定一段代码是否
  支持某个保证时, 拒绝一些有效的程序比接受无效程序要好一些. 这必然意味着有时代码
  可能是合法的, 但是 Rust 不这么认为. 在这种情况下, 可以使用不安全代码告诉编译器.

  另一个 Rust 存在不安全一面的原因是: 底层计算机硬件固有的不安全性. 如果 Rust 不
  允许进行不安全操作, 那么有些任务则根本完成不了. Rust 需要能够进行像直接与操作
  系统交互, 甚至于编写你自己的操作系统这样的底层系统编程.

** 不安全的超级力量
   可以通过 ~unsafe~ 关键字来切换到不安全 Rust, 接着可以开启一个新的存放不安全代
   码的块. 以下可以在不安全 Rust 中进行而不能用于安全 Rust 的操作:
   - 解引用裸指针
   - 调用不安全的函数或方法
   - 访问或修改可变静态变量
   - 实现不安全 trait
   - 访问 ~union~ 的字段

     
   ~unsafe~ 并不会关闭借用检查器或禁用任何其他 Rust 安全检查: 如果在不安全代码中
   使用引用, 它 *仍然会检查*. ~unsafe~ 关键字只是提供了那 5 个不会被编译器检查内
   存的安全功能. 仍然能在不安全块中获得某种程度的安全.

   ~unsafe~ 不意味着块中的代码就一定是危险的或者必然导致内存安全问题: 其意图在于
   作为程序员将会确保 ~unsafe~ 块中的代码以有效的方式访问内存.

** 解引用裸指针
   不安全 Rust 有两个被称为 *裸指针(raw pointers)* 的类似于引用的新类型. 和引用
   一样, 裸指针是不可变或可变的, 分别写作 ~*const T~ 和 ~*mut T~. 这里的星号是类
   型名称的一部分, *不是解引用运算符*. 在裸指针的上下文中, *不可变* 意味着指针解
   引用之后不能直接赋值.

   与引用和智能指针的区别在于, 记住裸指针
   - 允许忽略借用规则, 可以同时拥有不可变和可变的指针, 或多个指向相同位置的可变
     指针
   - 不保证指向有效内存
   - 允许为空
   - 不能实现任何自动清理功能
     
   通过去掉 Rust 强加的保证, 可以放弃安全保证性能或使用另一个语言或硬件接口的能
   力, 此时 Rust 的保证并不适用.

   不需要引入 ~unsafe~ 关键字, 可以在安全代码中 *创建* 裸指针, 只是不能在不安全
   块之外 *解引用* 裸指针.

** 使用 extern 函数调用外部代码
   Rust 的 ~extern~ 关键字有助于创建和使用 *外部函数接口(Foreign Function
   Interface, FFI)*. 外部函数接口是一个编程语言以定义函数肚饿方式, 其允许不同(外
   部)编程语言调用这些函数.

   ~extern "C"~ 块中, 列出了我们希望能够调用的另一个语言中的外部函数的签名和名
   称. ~"C"~ 部分定义了外部函数所使用的 *应用二进制接口(application binary
   interface, ABI)* -- ABI 定义了如何在汇编语言层面调用此函数. ~"C"~ ABI 是最常
   见的, 并遵循 C 编程语言的 ABI.

*** 从其他语言调用 Rust 函数
    也可以使用 ~extern~ 来创建一个允许其他语言调用 Rust 函数的接口. 不同于
    ~extern~ 块, 就在 ~fn~ 关键字之前增加 ~extern~ 关键字并指定所用到的 ABI. 还
    需增加 ~#[no_mangle]~ 注解来告诉 Rust 编译器不要 mangle 此函数的名称.
    Mangling 发生于编译器将我们指定的函数名修改为不同的名称时, 这回增加用于其他
    编译过程的额外信息, 不过会使其名称更难以阅读. 每一个编程语言的编译器都会以稍
    微不同的方式 mangle 函数名, 所以为了使 Rust 函数能在其他语言中指定, 必须禁用
    Rust 编译器的 name mangling.

    下面的例子中, 一旦其编译为动态库并从 C 语言中链接, ~call_from_c~ 函数就能够
    在 C 代码中访问:
    #+begin_src rust
      #[no_mangle]
      pub extern "C" fn call_from_c() {
          println!("Just called a Rust function from C!");
      }
    #+end_src

** 访问或修改可变静态变量
   Rust 的所有权规则下, 全局变量如果有 2 个线程访问, 可能会造成数据竞争.

   全局变量在 Rust 中不给称为 *静态(static)* 变量.
   
   ~static~ 变量通常采用 ~SCREAMING_SNAKE_CASE~ 写法, 并 *必须* 标注变量的类型.
   静态变量只能储存拥有 ~'static~ 生命周期的引用, 这意味着 Rust 编译器可以自己计
   算出其生命周期而无需显式标注. 访问不可变静态变量是安全的.

   静态变量中的值有一个固定的内存地址, 使用这个值总是会访问相同的地址, 常量则允
   许在任何被用到的时候复制其数据.

   访问和修改可变静态变量都是 *不安全* 的.

** 实现不安全 trait
   当 *至少有一个* 方法中包含验证器不能验证的不变量时 trait 是不安全的. 可以在
   ~trait~ 关键字将 trait 声明为 ~unsafe~, 同时 trait 的实现也必须标记为
   ~unsafe~

   对于 ~Sync~ 和 ~Send~ 标记 trait, 编译器会自动为完全由 ~Send~ 和 ~Sync~ 类型
   组成的类型自动实现它们. 如果包含了一些不是 ~Send~ 或 ~Sync~ 的类型, 比如裸指
   针, 并希望将此类型标记为 ~Send~ 或 ~Sync~, 则必须使用 ~unsafe~. Rust 不能保证
   我们的类型保证可以安全的跨线程发送或在多线程间访问, 所以需要我们自己进行检查
   并通过 ~unsafe~ 表明

** 访问联合体中的字段
   ~union~ 和 ~struct~ 类似, 但是在一个实例中同时只能使用一个声明的字段. 联合体
   主要用于和 C 代码中的联合体交互. 访问联合体的字段是不安全的, 因为 Rust 无法保
   证当前存储在联合体实例中数据的类型.

** 何时使用不安全代码
   使用 ~unsafe~ 来进行这 5 个操作之一是没有问题的, 甚至是不需要深思熟虑的, 不过
   编译器不能保证内存安全. 当有理由使用 ~unsafe~ 代码时, 是可以这么做的, 通过使
   用显式的 ~unsafe~ 标注使得在出现错误时易于追踪问题的源头.
